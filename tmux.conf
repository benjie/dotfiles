set-option -g prefix C-s
bind C-s send-prefix
bind C-j send-keys "C-j"
setw -g mode-keys vi
set-option -g -q mouse on
set-option -g history-limit 10000

bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# Vim-like bindings
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
unbind [
bind ` copy-mode
unbind p
bind p paste-buffer
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection

# after copying to a tmux buffer, hit y again to copy to clipboard
bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"

# Control-K clears the scrollback (use after Control-L)
bind -n C-k clear-history

# This fixes OSX clipboard issues
set-option -g default-command "reattach-to-user-namespace -l zsh"

# See: http://me.veekun.com/blog/2012/03/21/tmux-is-sweet-as-heck/
set-option -g set-titles on
#set-option -g set-titles-string '[#S:#I #H] #W'
set-option -g set-titles-string '[#I]: #W'

# Set the esc/alt disambiguation timeout to 10ms. The default is half a second, which makes vim kind of painful.
set-option -sg escape-time 10

# Start numbering at 1 (because keyboard is 1-9,0)
set-option -g base-index 1

set -g default-terminal "screen-256color"

# Configure additional things to display
#set status-right "%a %d/%m %l:%M %p"

#### Smart pane switching with awareness of vim splits
###bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
###bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
###bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
###bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
###bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# <prefix>C-l now does what C-l used to do. Sigh.
bind C-l send-keys 'C-l' \; clear-history

# Rebind pane commands to maintain current folder (tmux 1.9+ hack)
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

#source "$HOME/.vim/bundle/p"owerline/powerline/bindings/tmux/powerline.conf"
source "/usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf"


# Sourced from https://www.reddit.com/r/tmux/comments/3paqoi/tmux_21_has_been_released/cw552qd

# This allows you to press page up in normal mode and have it scroll back into
# the history. If you page down back to the bottom of the history, it
# automatically exits copy mode. If there is an alternate screen (i.e. a full
# screen app like vim, less, mutt, etc) then it does not enter copy mode, but
# passes through the key press. This is because alternate screen apps usually
# handle page up/down itself and also will have no scroll back.
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
bind-key -T copy-mode-vi PPage send-keys -X page-up
bind-key -T copy-mode-vi NPage send-keys -X page-down

# Very similar to page up, except for the mouse wheel. i.e. I just scroll back
# and forward and if I scroll to the end of the history, copy mode
# automatically exits. Again, just pass through the click for alternate
# screens - they often handle the mouse themselves.
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
#bind-key -T copy-mode-vi WheelUpPane send-keys -X halfpage-up
#bind-key -T copy-mode-vi WheelDownPane send-keys -X halfpage-down
bind-key -T copy-mode-vi WheelUpPane send-keys -X scroll-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X scroll-down

# These options allow you do have different styles for active and non-active
# panes. I usually have a black background, so now I set the non-active panes
# to slightly grey so it is easy to pick the active pane at a glance.
set-window-option -g window-style 'bg=#222222'
set-window-option -g window-active-style 'bg=#000000'
set-window-option -g pane-active-border-style ''


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
